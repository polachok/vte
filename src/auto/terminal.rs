// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::CursorBlinkMode;
use crate::CursorShape;
use crate::EraseBinding;
use crate::Format;
use crate::Pty;
use crate::PtyFlags;
use crate::TextBlinkMode;
use crate::WriteFlags;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "VteTerminal")]
    pub struct Terminal(Object<ffi::VteTerminal, ffi::VteTerminalClass>) @extends gtk::Widget, @implements gtk::Buildable, gtk::Scrollable;

    match fn {
        type_ => || ffi::vte_terminal_get_type(),
    }
}

impl Terminal {
    pub const NONE: Option<&'static Terminal> = None;

    #[doc(alias = "vte_terminal_new")]
    pub fn new() -> Terminal {
        unsafe { from_glib_none(ffi::vte_terminal_new()) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Terminal`] objects.
    ///
    /// This method returns an instance of [`TerminalBuilder`](crate::builders::TerminalBuilder) which can be used to create [`Terminal`] objects.
    pub fn builder() -> TerminalBuilder {
        TerminalBuilder::default()
    }
}

impl Default for Terminal {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Terminal`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
pub struct TerminalBuilder {
    allow_hyperlink: Option<bool>,
    audible_bell: Option<bool>,
    backspace_binding: Option<EraseBinding>,
    bold_is_bright: Option<bool>,
    cell_height_scale: Option<f64>,
    cell_width_scale: Option<f64>,
    cjk_ambiguous_width: Option<i32>,
    cursor_blink_mode: Option<CursorBlinkMode>,
    cursor_shape: Option<CursorShape>,
    delete_binding: Option<EraseBinding>,
    enable_bidi: Option<bool>,
    enable_fallback_scrolling: Option<bool>,
    enable_shaping: Option<bool>,
    enable_sixel: Option<bool>,
    font_desc: Option<pango::FontDescription>,
    font_scale: Option<f64>,
    input_enabled: Option<bool>,
    pointer_autohide: Option<bool>,
    pty: Option<Pty>,
    scroll_on_keystroke: Option<bool>,
    scroll_on_output: Option<bool>,
    scrollback_lines: Option<u32>,
    text_blink_mode: Option<TextBlinkMode>,
    app_paintable: Option<bool>,
    can_default: Option<bool>,
    can_focus: Option<bool>,
    #[cfg(any(feature = "gtk_v2_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_18")))]
    #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    double_buffered: Option<bool>,
    //events: /*Unknown type*/,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    expand: Option<bool>,
    #[cfg(any(feature = "gtk_v3_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_20")))]
    focus_on_click: Option<bool>,
    //halign: /*Unknown type*/,
    has_default: Option<bool>,
    has_focus: Option<bool>,
    #[cfg(any(feature = "gtk_v2_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_12")))]
    has_tooltip: Option<bool>,
    height_request: Option<i32>,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    hexpand: Option<bool>,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    hexpand_set: Option<bool>,
    is_focus: Option<bool>,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    margin: Option<i32>,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    margin_bottom: Option<i32>,
    #[cfg(any(feature = "gtk_v3_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_12")))]
    margin_end: Option<i32>,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    #[cfg_attr(feature = "v3_12", deprecated = "Since 3.12")]
    margin_left: Option<i32>,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    #[cfg_attr(feature = "v3_12", deprecated = "Since 3.12")]
    margin_right: Option<i32>,
    #[cfg(any(feature = "gtk_v3_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_12")))]
    margin_start: Option<i32>,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    margin_top: Option<i32>,
    name: Option<String>,
    no_show_all: Option<bool>,
    #[cfg(any(feature = "gtk_v3_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_8")))]
    opacity: Option<f64>,
    //parent: /*Unknown type*/,
    receives_default: Option<bool>,
    sensitive: Option<bool>,
    //style: /*Unknown type*/,
    #[cfg(any(feature = "gtk_v2_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_12")))]
    tooltip_markup: Option<String>,
    #[cfg(any(feature = "gtk_v2_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_12")))]
    tooltip_text: Option<String>,
    //valign: /*Unknown type*/,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    vexpand: Option<bool>,
    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    vexpand_set: Option<bool>,
    visible: Option<bool>,
    width_request: Option<i32>,
    //hadjustment: /*Unknown type*/,
    //hscroll-policy: /*Unknown type*/,
    //vadjustment: /*Unknown type*/,
    //vscroll-policy: /*Unknown type*/,
}

impl TerminalBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`TerminalBuilder`].
    pub fn new() -> Self {
        Self::default()
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Terminal`].
    #[must_use = "The builder must be built to be used"]
    pub fn build(self) -> Terminal {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref allow_hyperlink) = self.allow_hyperlink {
            properties.push(("allow-hyperlink", allow_hyperlink));
        }
        if let Some(ref audible_bell) = self.audible_bell {
            properties.push(("audible-bell", audible_bell));
        }
        if let Some(ref backspace_binding) = self.backspace_binding {
            properties.push(("backspace-binding", backspace_binding));
        }
        if let Some(ref bold_is_bright) = self.bold_is_bright {
            properties.push(("bold-is-bright", bold_is_bright));
        }
        if let Some(ref cell_height_scale) = self.cell_height_scale {
            properties.push(("cell-height-scale", cell_height_scale));
        }
        if let Some(ref cell_width_scale) = self.cell_width_scale {
            properties.push(("cell-width-scale", cell_width_scale));
        }
        if let Some(ref cjk_ambiguous_width) = self.cjk_ambiguous_width {
            properties.push(("cjk-ambiguous-width", cjk_ambiguous_width));
        }
        if let Some(ref cursor_blink_mode) = self.cursor_blink_mode {
            properties.push(("cursor-blink-mode", cursor_blink_mode));
        }
        if let Some(ref cursor_shape) = self.cursor_shape {
            properties.push(("cursor-shape", cursor_shape));
        }
        if let Some(ref delete_binding) = self.delete_binding {
            properties.push(("delete-binding", delete_binding));
        }
        if let Some(ref enable_bidi) = self.enable_bidi {
            properties.push(("enable-bidi", enable_bidi));
        }
        if let Some(ref enable_fallback_scrolling) = self.enable_fallback_scrolling {
            properties.push(("enable-fallback-scrolling", enable_fallback_scrolling));
        }
        if let Some(ref enable_shaping) = self.enable_shaping {
            properties.push(("enable-shaping", enable_shaping));
        }
        if let Some(ref enable_sixel) = self.enable_sixel {
            properties.push(("enable-sixel", enable_sixel));
        }
        if let Some(ref font_desc) = self.font_desc {
            properties.push(("font-desc", font_desc));
        }
        if let Some(ref font_scale) = self.font_scale {
            properties.push(("font-scale", font_scale));
        }
        if let Some(ref input_enabled) = self.input_enabled {
            properties.push(("input-enabled", input_enabled));
        }
        if let Some(ref pointer_autohide) = self.pointer_autohide {
            properties.push(("pointer-autohide", pointer_autohide));
        }
        if let Some(ref pty) = self.pty {
            properties.push(("pty", pty));
        }
        if let Some(ref scroll_on_keystroke) = self.scroll_on_keystroke {
            properties.push(("scroll-on-keystroke", scroll_on_keystroke));
        }
        if let Some(ref scroll_on_output) = self.scroll_on_output {
            properties.push(("scroll-on-output", scroll_on_output));
        }
        if let Some(ref scrollback_lines) = self.scrollback_lines {
            properties.push(("scrollback-lines", scrollback_lines));
        }
        if let Some(ref text_blink_mode) = self.text_blink_mode {
            properties.push(("text-blink-mode", text_blink_mode));
        }
        if let Some(ref app_paintable) = self.app_paintable {
            properties.push(("app-paintable", app_paintable));
        }
        if let Some(ref can_default) = self.can_default {
            properties.push(("can-default", can_default));
        }
        if let Some(ref can_focus) = self.can_focus {
            properties.push(("can-focus", can_focus));
        }
        #[cfg(any(feature = "gtk_v2_18", feature = "dox"))]
        if let Some(ref double_buffered) = self.double_buffered {
            properties.push(("double-buffered", double_buffered));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref expand) = self.expand {
            properties.push(("expand", expand));
        }
        #[cfg(any(feature = "gtk_v3_20", feature = "dox"))]
        if let Some(ref focus_on_click) = self.focus_on_click {
            properties.push(("focus-on-click", focus_on_click));
        }
        if let Some(ref has_default) = self.has_default {
            properties.push(("has-default", has_default));
        }
        if let Some(ref has_focus) = self.has_focus {
            properties.push(("has-focus", has_focus));
        }
        #[cfg(any(feature = "gtk_v2_12", feature = "dox"))]
        if let Some(ref has_tooltip) = self.has_tooltip {
            properties.push(("has-tooltip", has_tooltip));
        }
        if let Some(ref height_request) = self.height_request {
            properties.push(("height-request", height_request));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref hexpand) = self.hexpand {
            properties.push(("hexpand", hexpand));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref hexpand_set) = self.hexpand_set {
            properties.push(("hexpand-set", hexpand_set));
        }
        if let Some(ref is_focus) = self.is_focus {
            properties.push(("is-focus", is_focus));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref margin) = self.margin {
            properties.push(("margin", margin));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref margin_bottom) = self.margin_bottom {
            properties.push(("margin-bottom", margin_bottom));
        }
        #[cfg(any(feature = "gtk_v3_12", feature = "dox"))]
        if let Some(ref margin_end) = self.margin_end {
            properties.push(("margin-end", margin_end));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref margin_left) = self.margin_left {
            properties.push(("margin-left", margin_left));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref margin_right) = self.margin_right {
            properties.push(("margin-right", margin_right));
        }
        #[cfg(any(feature = "gtk_v3_12", feature = "dox"))]
        if let Some(ref margin_start) = self.margin_start {
            properties.push(("margin-start", margin_start));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref margin_top) = self.margin_top {
            properties.push(("margin-top", margin_top));
        }
        if let Some(ref name) = self.name {
            properties.push(("name", name));
        }
        if let Some(ref no_show_all) = self.no_show_all {
            properties.push(("no-show-all", no_show_all));
        }
        #[cfg(any(feature = "gtk_v3_8", feature = "dox"))]
        if let Some(ref opacity) = self.opacity {
            properties.push(("opacity", opacity));
        }
        if let Some(ref receives_default) = self.receives_default {
            properties.push(("receives-default", receives_default));
        }
        if let Some(ref sensitive) = self.sensitive {
            properties.push(("sensitive", sensitive));
        }
        #[cfg(any(feature = "gtk_v2_12", feature = "dox"))]
        if let Some(ref tooltip_markup) = self.tooltip_markup {
            properties.push(("tooltip-markup", tooltip_markup));
        }
        #[cfg(any(feature = "gtk_v2_12", feature = "dox"))]
        if let Some(ref tooltip_text) = self.tooltip_text {
            properties.push(("tooltip-text", tooltip_text));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref vexpand) = self.vexpand {
            properties.push(("vexpand", vexpand));
        }
        #[cfg(any(feature = "gtk_v3", feature = "dox"))]
        if let Some(ref vexpand_set) = self.vexpand_set {
            properties.push(("vexpand-set", vexpand_set));
        }
        if let Some(ref visible) = self.visible {
            properties.push(("visible", visible));
        }
        if let Some(ref width_request) = self.width_request {
            properties.push(("width-request", width_request));
        }
        glib::Object::new::<Terminal>(&properties)
            .expect("Failed to create an instance of Terminal")
    }

    pub fn allow_hyperlink(mut self, allow_hyperlink: bool) -> Self {
        self.allow_hyperlink = Some(allow_hyperlink);
        self
    }

    pub fn audible_bell(mut self, audible_bell: bool) -> Self {
        self.audible_bell = Some(audible_bell);
        self
    }

    pub fn backspace_binding(mut self, backspace_binding: EraseBinding) -> Self {
        self.backspace_binding = Some(backspace_binding);
        self
    }

    pub fn bold_is_bright(mut self, bold_is_bright: bool) -> Self {
        self.bold_is_bright = Some(bold_is_bright);
        self
    }

    pub fn cell_height_scale(mut self, cell_height_scale: f64) -> Self {
        self.cell_height_scale = Some(cell_height_scale);
        self
    }

    pub fn cell_width_scale(mut self, cell_width_scale: f64) -> Self {
        self.cell_width_scale = Some(cell_width_scale);
        self
    }

    pub fn cjk_ambiguous_width(mut self, cjk_ambiguous_width: i32) -> Self {
        self.cjk_ambiguous_width = Some(cjk_ambiguous_width);
        self
    }

    pub fn cursor_blink_mode(mut self, cursor_blink_mode: CursorBlinkMode) -> Self {
        self.cursor_blink_mode = Some(cursor_blink_mode);
        self
    }

    pub fn cursor_shape(mut self, cursor_shape: CursorShape) -> Self {
        self.cursor_shape = Some(cursor_shape);
        self
    }

    pub fn delete_binding(mut self, delete_binding: EraseBinding) -> Self {
        self.delete_binding = Some(delete_binding);
        self
    }

    pub fn enable_bidi(mut self, enable_bidi: bool) -> Self {
        self.enable_bidi = Some(enable_bidi);
        self
    }

    pub fn enable_fallback_scrolling(mut self, enable_fallback_scrolling: bool) -> Self {
        self.enable_fallback_scrolling = Some(enable_fallback_scrolling);
        self
    }

    pub fn enable_shaping(mut self, enable_shaping: bool) -> Self {
        self.enable_shaping = Some(enable_shaping);
        self
    }

    pub fn enable_sixel(mut self, enable_sixel: bool) -> Self {
        self.enable_sixel = Some(enable_sixel);
        self
    }

    pub fn font_desc(mut self, font_desc: &pango::FontDescription) -> Self {
        self.font_desc = Some(font_desc.clone());
        self
    }

    pub fn font_scale(mut self, font_scale: f64) -> Self {
        self.font_scale = Some(font_scale);
        self
    }

    pub fn input_enabled(mut self, input_enabled: bool) -> Self {
        self.input_enabled = Some(input_enabled);
        self
    }

    pub fn pointer_autohide(mut self, pointer_autohide: bool) -> Self {
        self.pointer_autohide = Some(pointer_autohide);
        self
    }

    pub fn pty(mut self, pty: &Pty) -> Self {
        self.pty = Some(pty.clone());
        self
    }

    pub fn scroll_on_keystroke(mut self, scroll_on_keystroke: bool) -> Self {
        self.scroll_on_keystroke = Some(scroll_on_keystroke);
        self
    }

    pub fn scroll_on_output(mut self, scroll_on_output: bool) -> Self {
        self.scroll_on_output = Some(scroll_on_output);
        self
    }

    pub fn scrollback_lines(mut self, scrollback_lines: u32) -> Self {
        self.scrollback_lines = Some(scrollback_lines);
        self
    }

    pub fn text_blink_mode(mut self, text_blink_mode: TextBlinkMode) -> Self {
        self.text_blink_mode = Some(text_blink_mode);
        self
    }

    pub fn app_paintable(mut self, app_paintable: bool) -> Self {
        self.app_paintable = Some(app_paintable);
        self
    }

    pub fn can_default(mut self, can_default: bool) -> Self {
        self.can_default = Some(can_default);
        self
    }

    pub fn can_focus(mut self, can_focus: bool) -> Self {
        self.can_focus = Some(can_focus);
        self
    }

    #[cfg(any(feature = "gtk_v2_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_18")))]
    #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    pub fn double_buffered(mut self, double_buffered: bool) -> Self {
        self.double_buffered = Some(double_buffered);
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    pub fn expand(mut self, expand: bool) -> Self {
        self.expand = Some(expand);
        self
    }

    #[cfg(any(feature = "gtk_v3_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_20")))]
    pub fn focus_on_click(mut self, focus_on_click: bool) -> Self {
        self.focus_on_click = Some(focus_on_click);
        self
    }

    pub fn has_default(mut self, has_default: bool) -> Self {
        self.has_default = Some(has_default);
        self
    }

    pub fn has_focus(mut self, has_focus: bool) -> Self {
        self.has_focus = Some(has_focus);
        self
    }

    #[cfg(any(feature = "gtk_v2_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_12")))]
    pub fn has_tooltip(mut self, has_tooltip: bool) -> Self {
        self.has_tooltip = Some(has_tooltip);
        self
    }

    pub fn height_request(mut self, height_request: i32) -> Self {
        self.height_request = Some(height_request);
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    pub fn hexpand(mut self, hexpand: bool) -> Self {
        self.hexpand = Some(hexpand);
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    pub fn hexpand_set(mut self, hexpand_set: bool) -> Self {
        self.hexpand_set = Some(hexpand_set);
        self
    }

    pub fn is_focus(mut self, is_focus: bool) -> Self {
        self.is_focus = Some(is_focus);
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    pub fn margin(mut self, margin: i32) -> Self {
        self.margin = Some(margin);
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    pub fn margin_bottom(mut self, margin_bottom: i32) -> Self {
        self.margin_bottom = Some(margin_bottom);
        self
    }

    #[cfg(any(feature = "gtk_v3_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_12")))]
    pub fn margin_end(mut self, margin_end: i32) -> Self {
        self.margin_end = Some(margin_end);
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    #[cfg_attr(feature = "v3_12", deprecated = "Since 3.12")]
    pub fn margin_left(mut self, margin_left: i32) -> Self {
        self.margin_left = Some(margin_left);
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    #[cfg_attr(feature = "v3_12", deprecated = "Since 3.12")]
    pub fn margin_right(mut self, margin_right: i32) -> Self {
        self.margin_right = Some(margin_right);
        self
    }

    #[cfg(any(feature = "gtk_v3_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_12")))]
    pub fn margin_start(mut self, margin_start: i32) -> Self {
        self.margin_start = Some(margin_start);
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    pub fn margin_top(mut self, margin_top: i32) -> Self {
        self.margin_top = Some(margin_top);
        self
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    pub fn no_show_all(mut self, no_show_all: bool) -> Self {
        self.no_show_all = Some(no_show_all);
        self
    }

    #[cfg(any(feature = "gtk_v3_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_8")))]
    pub fn opacity(mut self, opacity: f64) -> Self {
        self.opacity = Some(opacity);
        self
    }

    pub fn receives_default(mut self, receives_default: bool) -> Self {
        self.receives_default = Some(receives_default);
        self
    }

    pub fn sensitive(mut self, sensitive: bool) -> Self {
        self.sensitive = Some(sensitive);
        self
    }

    #[cfg(any(feature = "gtk_v2_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_12")))]
    pub fn tooltip_markup(mut self, tooltip_markup: &str) -> Self {
        self.tooltip_markup = Some(tooltip_markup.to_string());
        self
    }

    #[cfg(any(feature = "gtk_v2_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_12")))]
    pub fn tooltip_text(mut self, tooltip_text: &str) -> Self {
        self.tooltip_text = Some(tooltip_text.to_string());
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    pub fn vexpand(mut self, vexpand: bool) -> Self {
        self.vexpand = Some(vexpand);
        self
    }

    #[cfg(any(feature = "gtk_v3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3")))]
    pub fn vexpand_set(mut self, vexpand_set: bool) -> Self {
        self.vexpand_set = Some(vexpand_set);
        self
    }

    pub fn visible(mut self, visible: bool) -> Self {
        self.visible = Some(visible);
        self
    }

    pub fn width_request(mut self, width_request: i32) -> Self {
        self.width_request = Some(width_request);
        self
    }
}

pub trait TerminalExt: 'static {
    #[doc(alias = "vte_terminal_copy_clipboard_format")]
    fn copy_clipboard_format(&self, format: Format);

    #[doc(alias = "vte_terminal_copy_primary")]
    fn copy_primary(&self);

    //#[doc(alias = "vte_terminal_event_check_regex_array")]
    //fn event_check_regex_array(&self, event: &mut gdk::Event, regexes: /*Ignored*/&[&Regex], match_flags: u32) -> Vec<glib::GString>;

    //#[doc(alias = "vte_terminal_event_check_regex_simple")]
    //fn event_check_regex_simple(&self, event: &mut gdk::Event, regexes: /*Ignored*/&[&Regex], match_flags: u32) -> Option<Vec<glib::GString>>;

    #[doc(alias = "vte_terminal_feed")]
    fn feed(&self, data: &[u8]);

    #[doc(alias = "vte_terminal_feed_child")]
    fn feed_child(&self, text: &[u8]);

    #[doc(alias = "vte_terminal_get_allow_hyperlink")]
    #[doc(alias = "get_allow_hyperlink")]
    fn allows_hyperlink(&self) -> bool;

    #[doc(alias = "vte_terminal_get_audible_bell")]
    #[doc(alias = "get_audible_bell")]
    fn is_audible_bell(&self) -> bool;

    #[doc(alias = "vte_terminal_get_bold_is_bright")]
    #[doc(alias = "get_bold_is_bright")]
    fn is_bold_is_bright(&self) -> bool;

    #[doc(alias = "vte_terminal_get_cell_height_scale")]
    #[doc(alias = "get_cell_height_scale")]
    fn cell_height_scale(&self) -> f64;

    #[doc(alias = "vte_terminal_get_cell_width_scale")]
    #[doc(alias = "get_cell_width_scale")]
    fn cell_width_scale(&self) -> f64;

    #[doc(alias = "vte_terminal_get_char_height")]
    #[doc(alias = "get_char_height")]
    fn char_height(&self) -> libc::c_long;

    #[doc(alias = "vte_terminal_get_char_width")]
    #[doc(alias = "get_char_width")]
    fn char_width(&self) -> libc::c_long;

    #[doc(alias = "vte_terminal_get_cjk_ambiguous_width")]
    #[doc(alias = "get_cjk_ambiguous_width")]
    fn cjk_ambiguous_width(&self) -> i32;

    #[doc(alias = "vte_terminal_get_color_background_for_draw")]
    #[doc(alias = "get_color_background_for_draw")]
    fn color_background_for_draw(&self) -> gdk::RGBA;

    #[doc(alias = "vte_terminal_get_column_count")]
    #[doc(alias = "get_column_count")]
    fn column_count(&self) -> libc::c_long;

    #[doc(alias = "vte_terminal_get_current_directory_uri")]
    #[doc(alias = "get_current_directory_uri")]
    fn current_directory_uri(&self) -> Option<glib::GString>;

    #[doc(alias = "vte_terminal_get_current_file_uri")]
    #[doc(alias = "get_current_file_uri")]
    fn current_file_uri(&self) -> Option<glib::GString>;

    #[doc(alias = "vte_terminal_get_cursor_blink_mode")]
    #[doc(alias = "get_cursor_blink_mode")]
    fn cursor_blink_mode(&self) -> CursorBlinkMode;

    #[doc(alias = "vte_terminal_get_cursor_position")]
    #[doc(alias = "get_cursor_position")]
    fn cursor_position(&self) -> (libc::c_long, libc::c_long);

    #[doc(alias = "vte_terminal_get_cursor_shape")]
    #[doc(alias = "get_cursor_shape")]
    fn cursor_shape(&self) -> CursorShape;

    #[doc(alias = "vte_terminal_get_enable_bidi")]
    #[doc(alias = "get_enable_bidi")]
    fn enables_bidi(&self) -> bool;

    #[doc(alias = "vte_terminal_get_enable_fallback_scrolling")]
    #[doc(alias = "get_enable_fallback_scrolling")]
    fn enables_fallback_scrolling(&self) -> bool;

    #[doc(alias = "vte_terminal_get_enable_shaping")]
    #[doc(alias = "get_enable_shaping")]
    fn enables_shaping(&self) -> bool;

    #[doc(alias = "vte_terminal_get_enable_sixel")]
    #[doc(alias = "get_enable_sixel")]
    fn enables_sixel(&self) -> bool;

    #[doc(alias = "vte_terminal_get_font")]
    #[doc(alias = "get_font")]
    fn font(&self) -> Option<pango::FontDescription>;

    #[doc(alias = "vte_terminal_get_font_scale")]
    #[doc(alias = "get_font_scale")]
    fn font_scale(&self) -> f64;

    #[doc(alias = "vte_terminal_get_has_selection")]
    #[doc(alias = "get_has_selection")]
    fn has_selection(&self) -> bool;

    #[doc(alias = "vte_terminal_get_input_enabled")]
    #[doc(alias = "get_input_enabled")]
    fn is_input_enabled(&self) -> bool;

    #[doc(alias = "vte_terminal_get_mouse_autohide")]
    #[doc(alias = "get_mouse_autohide")]
    fn is_mouse_autohide(&self) -> bool;

    #[doc(alias = "vte_terminal_get_pty")]
    #[doc(alias = "get_pty")]
    fn pty(&self) -> Option<Pty>;

    #[doc(alias = "vte_terminal_get_row_count")]
    #[doc(alias = "get_row_count")]
    fn row_count(&self) -> libc::c_long;

    #[doc(alias = "vte_terminal_get_scroll_on_keystroke")]
    #[doc(alias = "get_scroll_on_keystroke")]
    fn is_scroll_on_keystroke(&self) -> bool;

    #[doc(alias = "vte_terminal_get_scroll_on_output")]
    #[doc(alias = "get_scroll_on_output")]
    fn is_scroll_on_output(&self) -> bool;

    #[doc(alias = "vte_terminal_get_scrollback_lines")]
    #[doc(alias = "get_scrollback_lines")]
    fn scrollback_lines(&self) -> libc::c_long;

    //#[doc(alias = "vte_terminal_get_text")]
    //#[doc(alias = "get_text")]
    //fn text(&self, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<glib::GString>;

    #[doc(alias = "vte_terminal_get_text_blink_mode")]
    #[doc(alias = "get_text_blink_mode")]
    fn text_blink_mode(&self) -> TextBlinkMode;

    //#[doc(alias = "vte_terminal_get_text_range")]
    //#[doc(alias = "get_text_range")]
    //fn text_range(&self, start_row: libc::c_long, start_col: libc::c_long, end_row: libc::c_long, end_col: libc::c_long, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<glib::GString>;

    #[doc(alias = "vte_terminal_get_window_title")]
    #[doc(alias = "get_window_title")]
    fn window_title(&self) -> Option<glib::GString>;

    #[doc(alias = "vte_terminal_get_word_char_exceptions")]
    #[doc(alias = "get_word_char_exceptions")]
    fn word_char_exceptions(&self) -> Option<glib::GString>;

    #[doc(alias = "vte_terminal_hyperlink_check_event")]
    fn hyperlink_check_event(&self, event: &mut gdk::Event) -> Option<glib::GString>;

    //#[doc(alias = "vte_terminal_match_add_regex")]
    //fn match_add_regex(&self, regex: /*Ignored*/&Regex, flags: u32) -> i32;

    #[doc(alias = "vte_terminal_match_check_event")]
    fn match_check_event(&self, event: &mut gdk::Event) -> (Option<glib::GString>, i32);

    #[doc(alias = "vte_terminal_match_remove")]
    fn match_remove(&self, tag: i32);

    #[doc(alias = "vte_terminal_match_remove_all")]
    fn match_remove_all(&self);

    #[doc(alias = "vte_terminal_match_set_cursor_name")]
    fn match_set_cursor_name(&self, tag: i32, cursor_name: &str);

    #[doc(alias = "vte_terminal_paste_clipboard")]
    fn paste_clipboard(&self);

    #[doc(alias = "vte_terminal_paste_primary")]
    fn paste_primary(&self);

    #[doc(alias = "vte_terminal_pty_new_sync")]
    fn pty_new_sync(
        &self,
        flags: PtyFlags,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<Pty, glib::Error>;

    #[doc(alias = "vte_terminal_reset")]
    fn reset(&self, clear_tabstops: bool, clear_history: bool);

    #[doc(alias = "vte_terminal_search_find_next")]
    fn search_find_next(&self) -> bool;

    #[doc(alias = "vte_terminal_search_find_previous")]
    fn search_find_previous(&self) -> bool;

    //#[doc(alias = "vte_terminal_search_get_regex")]
    //fn search_get_regex(&self) -> /*Ignored*/Option<Regex>;

    #[doc(alias = "vte_terminal_search_get_wrap_around")]
    fn search_get_wrap_around(&self) -> bool;

    //#[doc(alias = "vte_terminal_search_set_regex")]
    //fn search_set_regex(&self, regex: /*Ignored*/Option<&Regex>, flags: u32);

    #[doc(alias = "vte_terminal_search_set_wrap_around")]
    fn search_set_wrap_around(&self, wrap_around: bool);

    #[doc(alias = "vte_terminal_select_all")]
    fn select_all(&self);

    #[doc(alias = "vte_terminal_set_allow_hyperlink")]
    fn set_allow_hyperlink(&self, allow_hyperlink: bool);

    #[doc(alias = "vte_terminal_set_audible_bell")]
    fn set_audible_bell(&self, is_audible: bool);

    #[doc(alias = "vte_terminal_set_backspace_binding")]
    fn set_backspace_binding(&self, binding: EraseBinding);

    #[doc(alias = "vte_terminal_set_bold_is_bright")]
    fn set_bold_is_bright(&self, bold_is_bright: bool);

    #[doc(alias = "vte_terminal_set_cell_height_scale")]
    fn set_cell_height_scale(&self, scale: f64);

    #[doc(alias = "vte_terminal_set_cell_width_scale")]
    fn set_cell_width_scale(&self, scale: f64);

    #[doc(alias = "vte_terminal_set_cjk_ambiguous_width")]
    fn set_cjk_ambiguous_width(&self, width: i32);

    #[doc(alias = "vte_terminal_set_clear_background")]
    fn set_clear_background(&self, setting: bool);

    #[doc(alias = "vte_terminal_set_color_background")]
    fn set_color_background(&self, background: &gdk::RGBA);

    #[doc(alias = "vte_terminal_set_color_bold")]
    fn set_color_bold(&self, bold: Option<&gdk::RGBA>);

    #[doc(alias = "vte_terminal_set_color_cursor")]
    fn set_color_cursor(&self, cursor_background: Option<&gdk::RGBA>);

    #[doc(alias = "vte_terminal_set_color_cursor_foreground")]
    fn set_color_cursor_foreground(&self, cursor_foreground: Option<&gdk::RGBA>);

    #[doc(alias = "vte_terminal_set_color_foreground")]
    fn set_color_foreground(&self, foreground: &gdk::RGBA);

    #[doc(alias = "vte_terminal_set_color_highlight")]
    fn set_color_highlight(&self, highlight_background: Option<&gdk::RGBA>);

    #[doc(alias = "vte_terminal_set_color_highlight_foreground")]
    fn set_color_highlight_foreground(&self, highlight_foreground: Option<&gdk::RGBA>);

    #[doc(alias = "vte_terminal_set_colors")]
    fn set_colors(
        &self,
        foreground: Option<&gdk::RGBA>,
        background: Option<&gdk::RGBA>,
        palette: &[gdk::RGBA],
    );

    #[doc(alias = "vte_terminal_set_cursor_blink_mode")]
    fn set_cursor_blink_mode(&self, mode: CursorBlinkMode);

    #[doc(alias = "vte_terminal_set_cursor_shape")]
    fn set_cursor_shape(&self, shape: CursorShape);

    #[doc(alias = "vte_terminal_set_default_colors")]
    fn set_default_colors(&self);

    #[doc(alias = "vte_terminal_set_delete_binding")]
    fn set_delete_binding(&self, binding: EraseBinding);

    #[doc(alias = "vte_terminal_set_enable_bidi")]
    fn set_enable_bidi(&self, enable_bidi: bool);

    #[doc(alias = "vte_terminal_set_enable_fallback_scrolling")]
    fn set_enable_fallback_scrolling(&self, enable: bool);

    #[doc(alias = "vte_terminal_set_enable_shaping")]
    fn set_enable_shaping(&self, enable_shaping: bool);

    #[doc(alias = "vte_terminal_set_enable_sixel")]
    fn set_enable_sixel(&self, enabled: bool);

    #[doc(alias = "vte_terminal_set_font")]
    fn set_font(&self, font_desc: Option<&pango::FontDescription>);

    #[doc(alias = "vte_terminal_set_font_scale")]
    fn set_font_scale(&self, scale: f64);

    #[doc(alias = "vte_terminal_set_input_enabled")]
    fn set_input_enabled(&self, enabled: bool);

    #[doc(alias = "vte_terminal_set_mouse_autohide")]
    fn set_mouse_autohide(&self, setting: bool);

    #[doc(alias = "vte_terminal_set_pty")]
    fn set_pty(&self, pty: Option<&Pty>);

    #[doc(alias = "vte_terminal_set_scroll_on_keystroke")]
    fn set_scroll_on_keystroke(&self, scroll: bool);

    #[doc(alias = "vte_terminal_set_scroll_on_output")]
    fn set_scroll_on_output(&self, scroll: bool);

    #[doc(alias = "vte_terminal_set_scrollback_lines")]
    fn set_scrollback_lines(&self, lines: libc::c_long);

    #[doc(alias = "vte_terminal_set_size")]
    fn set_size(&self, columns: libc::c_long, rows: libc::c_long);

    #[doc(alias = "vte_terminal_set_text_blink_mode")]
    fn set_text_blink_mode(&self, text_blink_mode: TextBlinkMode);

    #[doc(alias = "vte_terminal_set_word_char_exceptions")]
    fn set_word_char_exceptions(&self, exceptions: &str);

    #[doc(alias = "vte_terminal_spawn_async")]
    fn spawn_async(
        &self,
        pty_flags: PtyFlags,
        working_directory: Option<&str>,
        argv: &[&std::path::Path],
        envv: &[&std::path::Path],
        spawn_flags: glib::SpawnFlags,
        child_setup: Option<Box_<dyn Fn() + 'static>>,
        timeout: i32,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: Option<Box_<dyn FnOnce(&Terminal, glib::Pid, Option<&glib::Error>) + 'static>>,
    );

    #[doc(alias = "vte_terminal_spawn_with_fds_async")]
    fn spawn_with_fds_async(
        &self,
        pty_flags: PtyFlags,
        working_directory: Option<&str>,
        argv: &[&std::path::Path],
        envv: &[&std::path::Path],
        fds: &[i32],
        map_fds: &[i32],
        spawn_flags: glib::SpawnFlags,
        child_setup: Option<Box_<dyn Fn() + 'static>>,
        timeout: i32,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: Option<Box_<dyn FnOnce(&Terminal, glib::Pid, Option<&glib::Error>) + 'static>>,
    );

    #[doc(alias = "vte_terminal_unselect_all")]
    fn unselect_all(&self);

    #[doc(alias = "vte_terminal_watch_child")]
    fn watch_child(&self, child_pid: glib::Pid);

    #[doc(alias = "vte_terminal_write_contents_sync")]
    fn write_contents_sync(
        &self,
        stream: &impl IsA<gio::OutputStream>,
        flags: WriteFlags,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<(), glib::Error>;
    /*
        #[doc(alias = "backspace-binding")]
        fn backspace_binding(&self) -> EraseBinding;

        #[doc(alias = "delete-binding")]
        fn delete_binding(&self) -> EraseBinding;

        #[doc(alias = "font-desc")]
        fn font_desc(&self) -> Option<pango::FontDescription>;

        #[doc(alias = "font-desc")]
        fn set_font_desc(&self, font_desc: Option<&pango::FontDescription>);

        #[doc(alias = "hyperlink-hover-uri")]
        fn hyperlink_hover_uri(&self) -> Option<glib::GString>;

        #[doc(alias = "pointer-autohide")]
        fn is_pointer_autohide(&self) -> bool;

        #[doc(alias = "pointer-autohide")]
        fn set_pointer_autohide(&self, pointer_autohide: bool);
    */

    #[doc(alias = "bell")]
    fn connect_bell<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "char-size-changed")]
    fn connect_char_size_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "child-exited")]
    fn connect_child_exited<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "commit")]
    fn connect_commit<F: Fn(&Self, &str, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "contents-changed")]
    fn connect_contents_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "copy-clipboard")]
    fn connect_copy_clipboard<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_copy_clipboard(&self);

    #[doc(alias = "current-directory-uri-changed")]
    fn connect_current_directory_uri_changed<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[doc(alias = "current-file-uri-changed")]
    fn connect_current_file_uri_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cursor-moved")]
    fn connect_cursor_moved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "decrease-font-size")]
    fn connect_decrease_font_size<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "encoding-changed")]
    fn connect_encoding_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "eof")]
    fn connect_eof<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    //#[doc(alias = "hyperlink-hover-uri-changed")]
    //fn connect_hyperlink_hover_uri_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "increase-font-size")]
    fn connect_increase_font_size<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "paste-clipboard")]
    fn connect_paste_clipboard<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_paste_clipboard(&self);

    #[doc(alias = "resize-window")]
    fn connect_resize_window<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "selection-changed")]
    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "text-deleted")]
    fn connect_text_deleted<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "text-inserted")]
    fn connect_text_inserted<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "text-modified")]
    fn connect_text_modified<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "text-scrolled")]
    fn connect_text_scrolled<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "window-title-changed")]
    fn connect_window_title_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "allow-hyperlink")]
    fn connect_allow_hyperlink_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "audible-bell")]
    fn connect_audible_bell_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "backspace-binding")]
    fn connect_backspace_binding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "bold-is-bright")]
    fn connect_bold_is_bright_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cell-height-scale")]
    fn connect_cell_height_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cell-width-scale")]
    fn connect_cell_width_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cjk-ambiguous-width")]
    fn connect_cjk_ambiguous_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "current-directory-uri")]
    fn connect_current_directory_uri_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    #[doc(alias = "current-file-uri")]
    fn connect_current_file_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cursor-blink-mode")]
    fn connect_cursor_blink_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cursor-shape")]
    fn connect_cursor_shape_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "delete-binding")]
    fn connect_delete_binding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "enable-bidi")]
    fn connect_enable_bidi_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "enable-fallback-scrolling")]
    fn connect_enable_fallback_scrolling_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[doc(alias = "enable-shaping")]
    fn connect_enable_shaping_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "enable-sixel")]
    fn connect_enable_sixel_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "font-desc")]
    fn connect_font_desc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "font-scale")]
    fn connect_font_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "hyperlink-hover-uri")]
    fn connect_hyperlink_hover_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "input-enabled")]
    fn connect_input_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "pointer-autohide")]
    fn connect_pointer_autohide_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "pty")]
    fn connect_pty_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "scroll-on-keystroke")]
    fn connect_scroll_on_keystroke_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "scroll-on-output")]
    fn connect_scroll_on_output_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "scrollback-lines")]
    fn connect_scrollback_lines_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "text-blink-mode")]
    fn connect_text_blink_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "window-title")]
    fn connect_window_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "word-char-exceptions")]
    fn connect_word_char_exceptions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Terminal>> TerminalExt for O {
    fn copy_clipboard_format(&self, format: Format) {
        unsafe {
            ffi::vte_terminal_copy_clipboard_format(
                self.as_ref().to_glib_none().0,
                format.into_glib(),
            );
        }
    }

    fn copy_primary(&self) {
        unsafe {
            ffi::vte_terminal_copy_primary(self.as_ref().to_glib_none().0);
        }
    }

    //fn event_check_regex_array(&self, event: &mut gdk::Event, regexes: /*Ignored*/&[&Regex], match_flags: u32) -> Vec<glib::GString> {
    //    unsafe { TODO: call ffi:vte_terminal_event_check_regex_array() }
    //}

    //fn event_check_regex_simple(&self, event: &mut gdk::Event, regexes: /*Ignored*/&[&Regex], match_flags: u32) -> Option<Vec<glib::GString>> {
    //    unsafe { TODO: call ffi:vte_terminal_event_check_regex_simple() }
    //}

    fn feed(&self, data: &[u8]) {
        let length = data.len() as isize;
        unsafe {
            ffi::vte_terminal_feed(
                self.as_ref().to_glib_none().0,
                data.to_glib_none().0,
                length,
            );
        }
    }

    fn feed_child(&self, text: &[u8]) {
        let length = text.len() as isize;
        unsafe {
            ffi::vte_terminal_feed_child(
                self.as_ref().to_glib_none().0,
                text.to_glib_none().0,
                length,
            );
        }
    }

    fn allows_hyperlink(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_allow_hyperlink(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_audible_bell(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_audible_bell(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_bold_is_bright(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_bold_is_bright(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn cell_height_scale(&self) -> f64 {
        unsafe { ffi::vte_terminal_get_cell_height_scale(self.as_ref().to_glib_none().0) }
    }

    fn cell_width_scale(&self) -> f64 {
        unsafe { ffi::vte_terminal_get_cell_width_scale(self.as_ref().to_glib_none().0) }
    }

    fn char_height(&self) -> libc::c_long {
        unsafe { ffi::vte_terminal_get_char_height(self.as_ref().to_glib_none().0) }
    }

    fn char_width(&self) -> libc::c_long {
        unsafe { ffi::vte_terminal_get_char_width(self.as_ref().to_glib_none().0) }
    }

    fn cjk_ambiguous_width(&self) -> i32 {
        unsafe { ffi::vte_terminal_get_cjk_ambiguous_width(self.as_ref().to_glib_none().0) }
    }

    fn color_background_for_draw(&self) -> gdk::RGBA {
        unsafe {
            let mut color = gdk::RGBA::uninitialized();
            ffi::vte_terminal_get_color_background_for_draw(
                self.as_ref().to_glib_none().0,
                color.to_glib_none_mut().0,
            );
            color
        }
    }

    fn column_count(&self) -> libc::c_long {
        unsafe { ffi::vte_terminal_get_column_count(self.as_ref().to_glib_none().0) }
    }

    fn current_directory_uri(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::vte_terminal_get_current_directory_uri(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn current_file_uri(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::vte_terminal_get_current_file_uri(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn cursor_blink_mode(&self) -> CursorBlinkMode {
        unsafe {
            from_glib(ffi::vte_terminal_get_cursor_blink_mode(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn cursor_position(&self) -> (libc::c_long, libc::c_long) {
        unsafe {
            let mut column = mem::MaybeUninit::uninit();
            let mut row = mem::MaybeUninit::uninit();
            ffi::vte_terminal_get_cursor_position(
                self.as_ref().to_glib_none().0,
                column.as_mut_ptr(),
                row.as_mut_ptr(),
            );
            let column = column.assume_init();
            let row = row.assume_init();
            (column, row)
        }
    }

    fn cursor_shape(&self) -> CursorShape {
        unsafe {
            from_glib(ffi::vte_terminal_get_cursor_shape(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn enables_bidi(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_enable_bidi(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn enables_fallback_scrolling(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_enable_fallback_scrolling(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn enables_shaping(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_enable_shaping(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn enables_sixel(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_enable_sixel(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn font(&self) -> Option<pango::FontDescription> {
        unsafe { from_glib_none(ffi::vte_terminal_get_font(self.as_ref().to_glib_none().0)) }
    }

    fn font_scale(&self) -> f64 {
        unsafe { ffi::vte_terminal_get_font_scale(self.as_ref().to_glib_none().0) }
    }

    fn has_selection(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_has_selection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_input_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_input_enabled(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_mouse_autohide(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_mouse_autohide(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn pty(&self) -> Option<Pty> {
        unsafe { from_glib_none(ffi::vte_terminal_get_pty(self.as_ref().to_glib_none().0)) }
    }

    fn row_count(&self) -> libc::c_long {
        unsafe { ffi::vte_terminal_get_row_count(self.as_ref().to_glib_none().0) }
    }

    fn is_scroll_on_keystroke(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_scroll_on_keystroke(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_scroll_on_output(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_get_scroll_on_output(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn scrollback_lines(&self) -> libc::c_long {
        unsafe { ffi::vte_terminal_get_scrollback_lines(self.as_ref().to_glib_none().0) }
    }

    //fn text(&self, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:vte_terminal_get_text() }
    //}

    fn text_blink_mode(&self) -> TextBlinkMode {
        unsafe {
            from_glib(ffi::vte_terminal_get_text_blink_mode(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn text_range(&self, start_row: libc::c_long, start_col: libc::c_long, end_row: libc::c_long, end_col: libc::c_long, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:vte_terminal_get_text_range() }
    //}

    fn window_title(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::vte_terminal_get_window_title(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn word_char_exceptions(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::vte_terminal_get_word_char_exceptions(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn hyperlink_check_event(&self, event: &mut gdk::Event) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::vte_terminal_hyperlink_check_event(
                self.as_ref().to_glib_none().0,
                event.to_glib_none_mut().0,
            ))
        }
    }

    //fn match_add_regex(&self, regex: /*Ignored*/&Regex, flags: u32) -> i32 {
    //    unsafe { TODO: call ffi:vte_terminal_match_add_regex() }
    //}

    fn match_check_event(&self, event: &mut gdk::Event) -> (Option<glib::GString>, i32) {
        unsafe {
            let mut tag = mem::MaybeUninit::uninit();
            let ret = from_glib_full(ffi::vte_terminal_match_check_event(
                self.as_ref().to_glib_none().0,
                event.to_glib_none_mut().0,
                tag.as_mut_ptr(),
            ));
            let tag = tag.assume_init();
            (ret, tag)
        }
    }

    fn match_remove(&self, tag: i32) {
        unsafe {
            ffi::vte_terminal_match_remove(self.as_ref().to_glib_none().0, tag);
        }
    }

    fn match_remove_all(&self) {
        unsafe {
            ffi::vte_terminal_match_remove_all(self.as_ref().to_glib_none().0);
        }
    }

    fn match_set_cursor_name(&self, tag: i32, cursor_name: &str) {
        unsafe {
            ffi::vte_terminal_match_set_cursor_name(
                self.as_ref().to_glib_none().0,
                tag,
                cursor_name.to_glib_none().0,
            );
        }
    }

    fn paste_clipboard(&self) {
        unsafe {
            ffi::vte_terminal_paste_clipboard(self.as_ref().to_glib_none().0);
        }
    }

    fn paste_primary(&self) {
        unsafe {
            ffi::vte_terminal_paste_primary(self.as_ref().to_glib_none().0);
        }
    }

    fn pty_new_sync(
        &self,
        flags: PtyFlags,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<Pty, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::vte_terminal_pty_new_sync(
                self.as_ref().to_glib_none().0,
                flags.into_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn reset(&self, clear_tabstops: bool, clear_history: bool) {
        unsafe {
            ffi::vte_terminal_reset(
                self.as_ref().to_glib_none().0,
                clear_tabstops.into_glib(),
                clear_history.into_glib(),
            );
        }
    }

    fn search_find_next(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_search_find_next(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn search_find_previous(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_search_find_previous(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn search_get_regex(&self) -> /*Ignored*/Option<Regex> {
    //    unsafe { TODO: call ffi:vte_terminal_search_get_regex() }
    //}

    fn search_get_wrap_around(&self) -> bool {
        unsafe {
            from_glib(ffi::vte_terminal_search_get_wrap_around(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn search_set_regex(&self, regex: /*Ignored*/Option<&Regex>, flags: u32) {
    //    unsafe { TODO: call ffi:vte_terminal_search_set_regex() }
    //}

    fn search_set_wrap_around(&self, wrap_around: bool) {
        unsafe {
            ffi::vte_terminal_search_set_wrap_around(
                self.as_ref().to_glib_none().0,
                wrap_around.into_glib(),
            );
        }
    }

    fn select_all(&self) {
        unsafe {
            ffi::vte_terminal_select_all(self.as_ref().to_glib_none().0);
        }
    }

    fn set_allow_hyperlink(&self, allow_hyperlink: bool) {
        unsafe {
            ffi::vte_terminal_set_allow_hyperlink(
                self.as_ref().to_glib_none().0,
                allow_hyperlink.into_glib(),
            );
        }
    }

    fn set_audible_bell(&self, is_audible: bool) {
        unsafe {
            ffi::vte_terminal_set_audible_bell(
                self.as_ref().to_glib_none().0,
                is_audible.into_glib(),
            );
        }
    }

    fn set_backspace_binding(&self, binding: EraseBinding) {
        unsafe {
            ffi::vte_terminal_set_backspace_binding(
                self.as_ref().to_glib_none().0,
                binding.into_glib(),
            );
        }
    }

    fn set_bold_is_bright(&self, bold_is_bright: bool) {
        unsafe {
            ffi::vte_terminal_set_bold_is_bright(
                self.as_ref().to_glib_none().0,
                bold_is_bright.into_glib(),
            );
        }
    }

    fn set_cell_height_scale(&self, scale: f64) {
        unsafe {
            ffi::vte_terminal_set_cell_height_scale(self.as_ref().to_glib_none().0, scale);
        }
    }

    fn set_cell_width_scale(&self, scale: f64) {
        unsafe {
            ffi::vte_terminal_set_cell_width_scale(self.as_ref().to_glib_none().0, scale);
        }
    }

    fn set_cjk_ambiguous_width(&self, width: i32) {
        unsafe {
            ffi::vte_terminal_set_cjk_ambiguous_width(self.as_ref().to_glib_none().0, width);
        }
    }

    fn set_clear_background(&self, setting: bool) {
        unsafe {
            ffi::vte_terminal_set_clear_background(
                self.as_ref().to_glib_none().0,
                setting.into_glib(),
            );
        }
    }

    fn set_color_background(&self, background: &gdk::RGBA) {
        unsafe {
            ffi::vte_terminal_set_color_background(
                self.as_ref().to_glib_none().0,
                background.to_glib_none().0,
            );
        }
    }

    fn set_color_bold(&self, bold: Option<&gdk::RGBA>) {
        unsafe {
            ffi::vte_terminal_set_color_bold(self.as_ref().to_glib_none().0, bold.to_glib_none().0);
        }
    }

    fn set_color_cursor(&self, cursor_background: Option<&gdk::RGBA>) {
        unsafe {
            ffi::vte_terminal_set_color_cursor(
                self.as_ref().to_glib_none().0,
                cursor_background.to_glib_none().0,
            );
        }
    }

    fn set_color_cursor_foreground(&self, cursor_foreground: Option<&gdk::RGBA>) {
        unsafe {
            ffi::vte_terminal_set_color_cursor_foreground(
                self.as_ref().to_glib_none().0,
                cursor_foreground.to_glib_none().0,
            );
        }
    }

    fn set_color_foreground(&self, foreground: &gdk::RGBA) {
        unsafe {
            ffi::vte_terminal_set_color_foreground(
                self.as_ref().to_glib_none().0,
                foreground.to_glib_none().0,
            );
        }
    }

    fn set_color_highlight(&self, highlight_background: Option<&gdk::RGBA>) {
        unsafe {
            ffi::vte_terminal_set_color_highlight(
                self.as_ref().to_glib_none().0,
                highlight_background.to_glib_none().0,
            );
        }
    }

    fn set_color_highlight_foreground(&self, highlight_foreground: Option<&gdk::RGBA>) {
        unsafe {
            ffi::vte_terminal_set_color_highlight_foreground(
                self.as_ref().to_glib_none().0,
                highlight_foreground.to_glib_none().0,
            );
        }
    }

    fn set_colors(
        &self,
        foreground: Option<&gdk::RGBA>,
        background: Option<&gdk::RGBA>,
        palette: &[gdk::RGBA],
    ) {
        let palette_size = palette.len() as usize;
        unsafe {
            ffi::vte_terminal_set_colors(
                self.as_ref().to_glib_none().0,
                foreground.to_glib_none().0,
                background.to_glib_none().0,
                palette.as_ptr() as *const gdk_sys::GdkRGBA,
                palette_size,
            );
        }
    }

    fn set_cursor_blink_mode(&self, mode: CursorBlinkMode) {
        unsafe {
            ffi::vte_terminal_set_cursor_blink_mode(
                self.as_ref().to_glib_none().0,
                mode.into_glib(),
            );
        }
    }

    fn set_cursor_shape(&self, shape: CursorShape) {
        unsafe {
            ffi::vte_terminal_set_cursor_shape(self.as_ref().to_glib_none().0, shape.into_glib());
        }
    }

    fn set_default_colors(&self) {
        unsafe {
            ffi::vte_terminal_set_default_colors(self.as_ref().to_glib_none().0);
        }
    }

    fn set_delete_binding(&self, binding: EraseBinding) {
        unsafe {
            ffi::vte_terminal_set_delete_binding(
                self.as_ref().to_glib_none().0,
                binding.into_glib(),
            );
        }
    }

    fn set_enable_bidi(&self, enable_bidi: bool) {
        unsafe {
            ffi::vte_terminal_set_enable_bidi(
                self.as_ref().to_glib_none().0,
                enable_bidi.into_glib(),
            );
        }
    }

    fn set_enable_fallback_scrolling(&self, enable: bool) {
        unsafe {
            ffi::vte_terminal_set_enable_fallback_scrolling(
                self.as_ref().to_glib_none().0,
                enable.into_glib(),
            );
        }
    }

    fn set_enable_shaping(&self, enable_shaping: bool) {
        unsafe {
            ffi::vte_terminal_set_enable_shaping(
                self.as_ref().to_glib_none().0,
                enable_shaping.into_glib(),
            );
        }
    }

    fn set_enable_sixel(&self, enabled: bool) {
        unsafe {
            ffi::vte_terminal_set_enable_sixel(self.as_ref().to_glib_none().0, enabled.into_glib());
        }
    }

    fn set_font(&self, font_desc: Option<&pango::FontDescription>) {
        unsafe {
            ffi::vte_terminal_set_font(self.as_ref().to_glib_none().0, font_desc.to_glib_none().0);
        }
    }

    fn set_font_scale(&self, scale: f64) {
        unsafe {
            ffi::vte_terminal_set_font_scale(self.as_ref().to_glib_none().0, scale);
        }
    }

    fn set_input_enabled(&self, enabled: bool) {
        unsafe {
            ffi::vte_terminal_set_input_enabled(
                self.as_ref().to_glib_none().0,
                enabled.into_glib(),
            );
        }
    }

    fn set_mouse_autohide(&self, setting: bool) {
        unsafe {
            ffi::vte_terminal_set_mouse_autohide(
                self.as_ref().to_glib_none().0,
                setting.into_glib(),
            );
        }
    }

    fn set_pty(&self, pty: Option<&Pty>) {
        unsafe {
            ffi::vte_terminal_set_pty(self.as_ref().to_glib_none().0, pty.to_glib_none().0);
        }
    }

    fn set_scroll_on_keystroke(&self, scroll: bool) {
        unsafe {
            ffi::vte_terminal_set_scroll_on_keystroke(
                self.as_ref().to_glib_none().0,
                scroll.into_glib(),
            );
        }
    }

    fn set_scroll_on_output(&self, scroll: bool) {
        unsafe {
            ffi::vte_terminal_set_scroll_on_output(
                self.as_ref().to_glib_none().0,
                scroll.into_glib(),
            );
        }
    }

    fn set_scrollback_lines(&self, lines: libc::c_long) {
        unsafe {
            ffi::vte_terminal_set_scrollback_lines(self.as_ref().to_glib_none().0, lines);
        }
    }

    fn set_size(&self, columns: libc::c_long, rows: libc::c_long) {
        unsafe {
            ffi::vte_terminal_set_size(self.as_ref().to_glib_none().0, columns, rows);
        }
    }

    fn set_text_blink_mode(&self, text_blink_mode: TextBlinkMode) {
        unsafe {
            ffi::vte_terminal_set_text_blink_mode(
                self.as_ref().to_glib_none().0,
                text_blink_mode.into_glib(),
            );
        }
    }

    fn set_word_char_exceptions(&self, exceptions: &str) {
        unsafe {
            ffi::vte_terminal_set_word_char_exceptions(
                self.as_ref().to_glib_none().0,
                exceptions.to_glib_none().0,
            );
        }
    }

    fn spawn_async(
        &self,
        pty_flags: PtyFlags,
        working_directory: Option<&str>,
        argv: &[&std::path::Path],
        envv: &[&std::path::Path],
        spawn_flags: glib::SpawnFlags,
        child_setup: Option<Box_<dyn Fn() + 'static>>,
        timeout: i32,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: Option<Box_<dyn FnOnce(&Terminal, glib::Pid, Option<&glib::Error>) + 'static>>,
    ) {
        let child_setup_data: Box_<Option<Box_<dyn Fn() + 'static>>> = Box_::new(child_setup);
        unsafe extern "C" fn child_setup_func(user_data: glib::ffi::gpointer) {
            let callback: &Option<Box_<dyn Fn() + 'static>> = &*(user_data as *mut _);
            if let Some(ref callback) = *callback {
                callback()
            } else {
                panic!("cannot get closure...")
            };
        }
        let child_setup = if child_setup_data.is_some() {
            Some(child_setup_func as _)
        } else {
            None
        };
        let callback_data: Box_<
            Option<Box_<dyn FnOnce(&Terminal, glib::Pid, Option<&glib::Error>) + 'static>>,
        > = Box_::new(callback);
        unsafe extern "C" fn callback_func(
            terminal: *mut ffi::VteTerminal,
            pid: glib::ffi::GPid,
            error: *mut glib::ffi::GError,
            user_data: glib::ffi::gpointer,
        ) {
            let terminal = from_glib_borrow(terminal);
            let pid = from_glib(pid);
            let error = if error != std::ptr::null_mut() {
                //let borrowed: Borrowed<_> = from_glib_borrow(error);
                //Some(borrowed)
                None
            } else {
                None
            };
            let callback: Box_<
                Option<Box_<dyn FnOnce(&Terminal, glib::Pid, Option<&glib::Error>) + 'static>>,
            > = Box_::from_raw(user_data as *mut _);
            let callback = (*callback).expect("cannot get closure...");
            callback(&terminal, pid, error)
        }
        let callback = if callback_data.is_some() {
            Some(callback_func as _)
        } else {
            None
        };
        unsafe extern "C" fn child_setup_data_destroy_func(data: glib::ffi::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn() + 'static>>> = Box_::from_raw(data as *mut _);
        }
        let destroy_call8 = Some(child_setup_data_destroy_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn() + 'static>>> = child_setup_data;
        let super_callback1: Box_<
            Option<Box_<dyn FnOnce(&Terminal, glib::Pid, Option<&glib::Error>) + 'static>>,
        > = callback_data;
        unsafe {
            ffi::vte_terminal_spawn_async(
                self.as_ref().to_glib_none().0,
                pty_flags.into_glib(),
                working_directory.to_glib_none().0,
                argv.to_glib_none().0,
                envv.to_glib_none().0,
                spawn_flags.into_glib(),
                child_setup,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call8,
                timeout,
                cancellable.to_glib_none().0 as *mut gio_sys::GCancellable,
                callback,
                Box_::into_raw(super_callback1) as *mut _,
            );
        }
    }

    fn spawn_with_fds_async(
        &self,
        pty_flags: PtyFlags,
        working_directory: Option<&str>,
        argv: &[&std::path::Path],
        envv: &[&std::path::Path],
        fds: &[i32],
        map_fds: &[i32],
        spawn_flags: glib::SpawnFlags,
        child_setup: Option<Box_<dyn Fn() + 'static>>,
        timeout: i32,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: Option<Box_<dyn FnOnce(&Terminal, glib::Pid, Option<&glib::Error>) + 'static>>,
    ) {
        let n_fds = fds.len() as i32;
        let n_map_fds = map_fds.len() as i32;
        let child_setup_data: Box_<Option<Box_<dyn Fn() + 'static>>> = Box_::new(child_setup);
        unsafe extern "C" fn child_setup_func(user_data: glib::ffi::gpointer) {
            let callback: &Option<Box_<dyn Fn() + 'static>> = &*(user_data as *mut _);
            if let Some(ref callback) = *callback {
                callback()
            } else {
                panic!("cannot get closure...")
            };
        }
        let child_setup = if child_setup_data.is_some() {
            Some(child_setup_func as _)
        } else {
            None
        };
        let callback_data: Box_<
            Option<Box_<dyn FnOnce(&Terminal, glib::Pid, Option<&glib::Error>) + 'static>>,
        > = Box_::new(callback);
        unsafe extern "C" fn callback_func(
            terminal: *mut ffi::VteTerminal,
            pid: glib::ffi::GPid,
            error: *mut glib::ffi::GError,
            user_data: glib::ffi::gpointer,
        ) {
            let terminal = from_glib_borrow(terminal);
            let pid = from_glib(pid);
            let error = from_glib_borrow(error);
            let callback: Box_<
                Option<Box_<dyn FnOnce(&Terminal, glib::Pid, &glib::Error) + 'static>>,
            > = Box_::from_raw(user_data as *mut _);
            let callback = (*callback).expect("cannot get closure...");
            callback(&terminal, pid, &error)
        }
        let callback = if callback_data.is_some() {
            Some(callback_func as _)
        } else {
            None
        };
        unsafe extern "C" fn child_setup_data_destroy_func(data: glib::ffi::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn() + 'static>>> = Box_::from_raw(data as *mut _);
        }
        let destroy_call12 = Some(child_setup_data_destroy_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn() + 'static>>> = child_setup_data;
        let super_callback1: Box_<
            Option<Box_<dyn FnOnce(&Terminal, glib::Pid, Option<&glib::Error>) + 'static>>,
        > = callback_data;
        unsafe {
            ffi::vte_terminal_spawn_with_fds_async(
                self.as_ref().to_glib_none().0,
                pty_flags.into_glib(),
                working_directory.to_glib_none().0,
                argv.to_glib_none().0,
                envv.to_glib_none().0,
                fds.to_glib_none().0,
                n_fds,
                map_fds.to_glib_none().0,
                n_map_fds,
                spawn_flags.into_glib(),
                child_setup,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call12,
                timeout,
                cancellable.to_glib_none().0 as *mut gio_sys::GCancellable,
                callback,
                Box_::into_raw(super_callback1) as *mut _,
            );
        }
    }

    fn unselect_all(&self) {
        unsafe {
            ffi::vte_terminal_unselect_all(self.as_ref().to_glib_none().0);
        }
    }

    fn watch_child(&self, child_pid: glib::Pid) {
        unsafe {
            ffi::vte_terminal_watch_child(self.as_ref().to_glib_none().0, child_pid.0);
        }
    }

    fn write_contents_sync(
        &self,
        stream: &impl IsA<gio::OutputStream>,
        flags: WriteFlags,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::vte_terminal_write_contents_sync(
                self.as_ref().to_glib_none().0,
                stream.as_ref().to_glib_none().0,
                flags.into_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }
    /*
        fn backspace_binding(&self) -> EraseBinding {
            glib::ObjectExt::property(self.as_ref(), "backspace-binding")
        }

        fn delete_binding(&self) -> EraseBinding {
            glib::ObjectExt::property(self.as_ref(), "delete-binding")
        }

        fn font_desc(&self) -> Option<pango::FontDescription> {
            glib::ObjectExt::property(self.as_ref(), "font-desc")
        }

        fn set_font_desc(&self, font_desc: Option<&pango::FontDescription>) {
            glib::ObjectExt::set_property(self.as_ref(), "font-desc", &font_desc)
        }

        fn hyperlink_hover_uri(&self) -> Option<glib::GString> {
            glib::ObjectExt::property(self.as_ref(), "hyperlink-hover-uri")
        }

        fn is_pointer_autohide(&self) -> bool {
            glib::ObjectExt::property(self.as_ref(), "pointer-autohide")
        }

        fn set_pointer_autohide(&self, pointer_autohide: bool) {
            glib::ObjectExt::set_property(self.as_ref(), "pointer-autohide", &pointer_autohide)
        }
    */

    fn connect_bell<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn bell_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"bell\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    bell_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_char_size_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn char_size_changed_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P, u32, u32) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            width: libc::c_uint,
            height: libc::c_uint,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                Terminal::from_glib_borrow(this).unsafe_cast_ref(),
                width,
                height,
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"char-size-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    char_size_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_child_exited<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn child_exited_trampoline<P: IsA<Terminal>, F: Fn(&P, i32) + 'static>(
            this: *mut ffi::VteTerminal,
            status: libc::c_int,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref(), status)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"child-exited\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    child_exited_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_commit<F: Fn(&Self, &str, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn commit_trampoline<P: IsA<Terminal>, F: Fn(&P, &str, u32) + 'static>(
            this: *mut ffi::VteTerminal,
            text: *mut libc::c_char,
            size: libc::c_uint,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                Terminal::from_glib_borrow(this).unsafe_cast_ref(),
                &glib::GString::from_glib_borrow(text),
                size,
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"commit\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    commit_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_contents_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn contents_changed_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"contents-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    contents_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_copy_clipboard<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn copy_clipboard_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"copy-clipboard\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    copy_clipboard_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_copy_clipboard(&self) {
        self.emit_by_name("copy-clipboard", &[]);
    }

    fn connect_current_directory_uri_changed<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn current_directory_uri_changed_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"current-directory-uri-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    current_directory_uri_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_current_file_uri_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn current_file_uri_changed_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"current-file-uri-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    current_file_uri_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_cursor_moved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_moved_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"cursor-moved\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    cursor_moved_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_decrease_font_size<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn decrease_font_size_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"decrease-font-size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    decrease_font_size_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_encoding_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn encoding_changed_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"encoding-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    encoding_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_eof<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn eof_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"eof\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    eof_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    //fn connect_hyperlink_hover_uri_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored bbox: Gdk.Rectangle
    //}

    fn connect_increase_font_size<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn increase_font_size_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"increase-font-size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    increase_font_size_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_paste_clipboard<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn paste_clipboard_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"paste-clipboard\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    paste_clipboard_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_paste_clipboard(&self) {
        self.emit_by_name("paste-clipboard", &[]);
    }

    fn connect_resize_window<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn resize_window_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P, u32, u32) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            width: libc::c_uint,
            height: libc::c_uint,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                Terminal::from_glib_borrow(this).unsafe_cast_ref(),
                width,
                height,
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"resize-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    resize_window_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn selection_changed_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"selection-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    selection_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_text_deleted<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn text_deleted_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"text-deleted\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    text_deleted_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_text_inserted<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn text_inserted_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"text-inserted\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    text_inserted_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_text_modified<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn text_modified_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"text-modified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    text_modified_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_text_scrolled<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn text_scrolled_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P, i32) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            delta: libc::c_int,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref(), delta)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"text-scrolled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    text_scrolled_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_window_title_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn window_title_changed_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"window-title-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    window_title_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_allow_hyperlink_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_hyperlink_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::allow-hyperlink\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_allow_hyperlink_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_audible_bell_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_audible_bell_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::audible-bell\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_audible_bell_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_backspace_binding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_backspace_binding_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::backspace-binding\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_backspace_binding_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_bold_is_bright_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bold_is_bright_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bold-is-bright\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bold_is_bright_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_cell_height_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cell_height_scale_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cell-height-scale\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cell_height_scale_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_cell_width_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cell_width_scale_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cell-width-scale\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cell_width_scale_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_cjk_ambiguous_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cjk_ambiguous_width_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cjk-ambiguous-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cjk_ambiguous_width_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_current_directory_uri_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_directory_uri_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::current-directory-uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_current_directory_uri_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_current_file_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_file_uri_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::current-file-uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_current_file_uri_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_cursor_blink_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cursor_blink_mode_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cursor-blink-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cursor_blink_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_cursor_shape_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cursor_shape_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cursor-shape\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cursor_shape_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_delete_binding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_delete_binding_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::delete-binding\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_delete_binding_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_enable_bidi_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_bidi_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-bidi\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_bidi_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_enable_fallback_scrolling_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_fallback_scrolling_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-fallback-scrolling\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_fallback_scrolling_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_enable_shaping_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_shaping_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-shaping\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_shaping_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_enable_sixel_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_sixel_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-sixel\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_sixel_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_font_desc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_font_desc_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::font-desc\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_font_desc_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_font_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_font_scale_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::font-scale\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_font_scale_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_hyperlink_hover_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hyperlink_hover_uri_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hyperlink-hover-uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hyperlink_hover_uri_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_input_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_enabled_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_enabled_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_pointer_autohide_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pointer_autohide_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::pointer-autohide\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_pointer_autohide_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_pty_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pty_trampoline<P: IsA<Terminal>, F: Fn(&P) + 'static>(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::pty\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_pty_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_scroll_on_keystroke_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scroll_on_keystroke_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scroll-on-keystroke\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scroll_on_keystroke_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_scroll_on_output_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scroll_on_output_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scroll-on-output\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scroll_on_output_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_scrollback_lines_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scrollback_lines_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scrollback-lines\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scrollback_lines_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_text_blink_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_text_blink_mode_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::text-blink-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_text_blink_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_window_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_window_title_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::window-title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_window_title_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_word_char_exceptions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_word_char_exceptions_trampoline<
            P: IsA<Terminal>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::VteTerminal,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::word-char-exceptions\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_word_char_exceptions_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Terminal {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Terminal")
    }
}
